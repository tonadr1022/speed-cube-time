services:
  frontend:
    container_name: frontend
    build:
      context: ./frontend
    depends_on:
      - speed-cube-time
    ports:
      - 8000:8000
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
    networks:
      - client-side

  speed-cube-time:
    depends_on:
      db:
        condition: service_healthy
    build:
      context: .
      dockerfile: cmd/server/Dockerfile.dev
    volumes:
      - .:/opt/app/api
    container_name: speed-cube-time-rest-server
    hostname: speed-cube-time-rest-server
    networks:
      localnet:
        aliases:
          - db
      client-side:
    ports:
      - 80:8080
    environment:
      - DATABASE_URL=postgres://postgres:password@db:5432/cube?sslmode=disable
      - APP_DSN=postgres://postgres:password@db:5432/cube?sslmode=disable
      - PGHOST=db
      - PGPORT=5432
      - PGUSER=postgres
      - PGPASSWORD=password
      - PGDATABASE=cube
      - PORT=8080
      - JWT_SECRET=Dn84hN+gnUHaBY1ZPFvlr8EKu3pZEhfYtMMo7xUkdO0=
      - TOKEN_EXPIRATION_MINUTES=4320
    deploy:
      restart_policy:
        condition: on-failure
  db:
    image: postgres:latest
    container_name: postgres
    restart: always
    networks:
      - localnet
    expose:
      - 8080
      - 5432
    ports:
      - 5432:5432
      - 8080:8080
    volumes:
      - pgdata:/var/lib/postgresql/data
    environment:
      - PG_USER=postgres
      - PG_PASSWORD=password
      - PG_DATABASE=cube
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d cube -U postgres"]
      interval: 1s
      timeout: 5s
      retries: 10
  migrate: &basemigrate
    container_name: migrate
    profiles: ["tools"]
    depends_on:
      db:
        condition: service_healthy
    networks:
      - localnet
    image: migrate/migrate
    entrypoint:
      [
        "migrate",
        "-path",
        "/migrations",
        "-database",
        "postgres://postgres:password@db:5432/cube",
      ]
    command: up
    links:
      - db
    volumes:
      - ./migrations:/migrations
  migrate-create:
    <<: *basemigrate
    entrypoint: migrate create -dir /migrations -ext sql
    command: ""
  database-reset:
    <<: *basemigrate
    command: ["drop", "-f"]
volumes:
  pgdata:

networks:
  localnet:
    driver: bridge
  client-side:
